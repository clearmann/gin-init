package encryptor

import (
	"testing"
)

const (
	testPublicKeyPEM = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3X2p1MBuCQ7aC/yoxJ5W
bfNTEKsuceSbsYWgosFB2pLzNJR8yKU7S5eA35L0rBgaDfx9oMus0WmqvliZUXI2
SiuUiflF9F8p69dvw/J0cVXd7fPhlLjsfqauCD4fbFxbmSvX+MgJ0kp4+H+xQ4C+
C8D+qB6w4YUvP6gFtucN/wEQc0v+nU9uHlxihSu4Pc/5qtZtA/p4RUCURZlfAqDN
jMsI7pLnxdQCZ2qWH8X8ghG8zotbmukO8pAmFoDFF0RKtxfPn9MhRUOpfNXxektq
XGnoCu38Q1utVt/0aUclMm4XEHMxlBnwmzmoIojXzMKavoepBz2bD/iYjEleP9SV
EQIDAQAB
-----END PUBLIC KEY-----`
	testPrivateKeyPEM = `-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA3X2p1MBuCQ7aC/yoxJ5WbfNTEKsuceSbsYWgosFB2pLzNJR8
yKU7S5eA35L0rBgaDfx9oMus0WmqvliZUXI2SiuUiflF9F8p69dvw/J0cVXd7fPh
lLjsfqauCD4fbFxbmSvX+MgJ0kp4+H+xQ4C+C8D+qB6w4YUvP6gFtucN/wEQc0v+
nU9uHlxihSu4Pc/5qtZtA/p4RUCURZlfAqDNjMsI7pLnxdQCZ2qWH8X8ghG8zotb
mukO8pAmFoDFF0RKtxfPn9MhRUOpfNXxektqXGnoCu38Q1utVt/0aUclMm4XEHMx
lBnwmzmoIojXzMKavoepBz2bD/iYjEleP9SVEQIDAQABAoIBAA0pCExB2sfjAAWy
T3zPQ6doy8izwyC1SqLzo6XIAdew346CPB/X4XwOVnPyUWNgUzv9gqFpOK2Ar8p7
jTCPrrYdfMft7cAlX2JJ/LQR1eVeCr+2u/KQQk0MLk8DEe7oVfD17/EyQZMjJaju
PWQbZC9imj73A9+CgFox65UAiY5bL3fripTyi0w9crPqfMTAdZPKFtkoomKEl03E
YnFgJVT/kg/S9dVYgnRXobaK/1EaJkO6Cjpu+2ZNzzywBlfLmbTFo40cVAUNQXHd
Orhgsnc6BUNbdPWdX/D6NYHg/nrBPfV8kdR89H0v3VYk3ZsS55tRlAKMIPoSKcFP
aN7+vBkCgYEA3lf9ergPLKoWY9nSpjOPFRefObgN3o/5aKWivxEcK03HwfETYPtL
ZWjHIcjluHwcFqsGEz4Yr06tAXoCYajlTofES2ctt6l8O/dbiNDPjAJb8vINKfJC
CZZdJQ617qKZzcHypqM91Z7Zlzu3PkYJB9wWA9escyPTulwrb8qCXCcCgYEA/wSg
AKRa7k32YoH7zZY0HgRyED1dDK5gbVfuMit2yAnVc3jDZRxtA8JpuqwH+7NKf32R
QC3tDFN4ihWjqYYsZXq1tssgq6eHXL/QGSPNdwKV4Uiw8MAutNJiCdvIi2K/mKzf
hPRbtmQX2MHbvY6UlPk+ir/L1EkHS54XvWNVcAcCgYADhKbpIzJyRXq3N8IiiRxR
fB8z3Zqyk9qhckWB+nZUpRVtFzB0T2WhBChqe3BPG/+hyDD/avMfCwKnzFNvUinW
tUVA4DAUAOWLWV2ka5FtKLhlvrjAmim7VxrANFxim0YNwGzjgB/BWpMc1oAOxzLr
YesjQm1jIQT/pOe3DCBF7wKBgQC+U6VW1VNIJ8eLHZfgiAm9nXPDywh3Pm2ZLdcI
eofcI/q6g5bRD7YM6DwgpeQPZnBjVkPhsmUIngOIiz3qd8kKs9qK4m8vrYjJIB8f
pCjkeXmC+c2U4Nn6+klRMkcqQDjeqabog7cvGOTzUTu+7XrW9G5I/3wQo7BeL09o
eYp6YQKBgQCGj7X60XzM4f/HNc0zC0Fq51utjxR4+qwHOb97HvREkKnXc1lMbQ7+
YorrAIN1ATCvhXmBu/bQwgNnprfqS3RwlX7z27vs3j7IOqOo8kY/kFJwpw7ThE8B
0yuAL8d7U1dDBu+G4mauJk8yQ/OgUY8yuIhZL/br+D/eTeLqtjrXJg==
-----END RSA PRIVATE KEY-----`
)

func TestRSASignVerify(t *testing.T) {
	privateKey, err := RSAPrivateKeyFromPEM([]byte(testPrivateKeyPEM))
	if err != nil {
		t.Error(err)
	}
	publicKey, err := RSAPublicKeyFromPEM([]byte(testPublicKeyPEM))
	if err != nil {
		t.Error(err)
	}

	data := []byte("Hello")
	t.Logf("data: %s   %s", data, EncodeBase64(data))

	{
		ttt, _ := DecodeBase64("31346c624e414537534863465a494332484867336243317372584a414b6f617030514b3375794a3753334a654a78495a6f5079302b5a5176585379547632766672667673656d44524d7572392f6f456c5537746251346f39723449316d63504d553651613149484f474d472f6c574779514b792f745a6e562f2b41455151552b73586934714a516e456355377a7747474d3443355274366f7a56752b706674552b67357652347377666868744f5978704a50732f6c6a56366e7778703468536f6f734368454d362b394a696d775350302b76436252577332516e694734336f444649684d316149316e4c496f6d4869374c72563243453647565473486c52357471764a766275436353384d6948647179324b2f2b65614678584a394b427567416e4f376b706e374b452b2b6e6f61326f37775258587949485a6f324f3037742b3762415853766854332b757166794d4b4d65526570673d3d")
		t.Logf("data base64: %d", len(ttt))
	}

	signature, err := SignRSA(privateKey, data)
	if err != nil {
		t.Error(err)
	}

	t.Logf("signature base64: %d %s", len(signature), EncodeBase64(signature))

	if err := VerifyRSA(publicKey, data, signature); err != nil {
		t.Error(err)
	}
}
